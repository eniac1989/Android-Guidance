---
layout: post
color: purple
cover: "http://s3-ap-southeast-1.amazonaws.com/monster-machine/images/horssghonr-1436272011-Midas.jpg"
title:  "Android Runtime Environment!"
date:   2019-06-14 13:50:39
categories: android basic knowledge
---

<!--
{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %} -->
<div dir="rtl" align="right">
قبل از آنکه به سراغ Android runtime برویم لازم است تا در مورد محیط runtime دانش لازمه را کسب کنیم .اما runtime چیست؟
به عبارتی ساده ، سیستمی است که توسط سیستم عامل به منظور تبدیل کد زبان سطح بالا (که برنامه نویس می نویسد (مثل جاوا)) به زبان ماشین (کدی که توسط cpu قابل فهم باشد) استفاده می گردد.runtime شامل دستورات نرم افزاری است که هنگامی که برنامه شما اجرا می شود ، اجرا می گردد. برای اینکه Cpu بتواند برنامه را اجرا کند باید برنامه به زبان ماشین ترجمه شود.که این اتفاق توسط مترجم رخ می دهد .آنچه در زیر شرح داده می شود نسل مترجم هاست که به دنبال یکدیگر آمده اند :
</div>
<div dir="rtl" align="right">
1.1.	اسمبلر ها :
به صورت مستقیم کدهای اسمبلی را به زبان ماشین تبدیل و ترجمه می کند که بسیار هم سریع است.
</div>
<div dir="rtl" align="right">
1.2.	کامپایلرها :
کد را به زبان اسمبلی ترجمه می کند و سپس از اسمبلر برای ترجمه کد به باینری کد استفاده می کند. استفاده این کامپایل کندتر است اما اجرای آن سریعتر است.اما بزرگترین مشکل آن این است که کد ماشین تولید شده وابسته به پلت فرم است . به بیان دیگر کدی که برروی ماشین اجرا می شود ممکن است برروی ماشین دیگر اجرا نشود.
</div>
<div dir="rtl" align="right">
1.3.	مفسر ها
کد را در حال اجرا ترجمه می کند.این ترجمه در زمان اجرا رخ می دهد و اجرا کند خواهد بود.
</div>
<div dir="rtl" align="right">
1.4.	اجرای کدهای جاوا  به چه شکل است؟
برای حفظ استقلال کد نسبت به پلت فرم ، جاوا JVM را توسعه داد (JAVA Virtual Machine).وقتی گفته می شود JVM را مخصوص هر پلت فرمی توسعه داد به این معنی است که JVM وابسته به پلت فرم است.کامپایلر جاوا  فایل های .java را به فایل های .class تبدیل می کند که در واقع بایت کد نامیده می شود.این بایت کد به JVM داده می شود که آن را به زبان ماشین تبدیل می کند.این سریع تر از تفسیر است اما کندتر از کامپایل C++ است.
</div>
<div dir="rtl" align="right">
1.5.	اجرای کدهای اندروید به چه شکل است؟
در اندروید کلاس های جاوا به بایت کد DEX تبدیل می شوند.فرمت بایت کد DEX یا توسط runtime های ART و یا Dalvik به کد زبان ماشین تبدیل می شود.در اینجا بایت کد DEX مستقل از معماری دستگاه است.برای استفاده از Dalvik موانعی وجود داشت بنابراین از اندروید 4.4. KitKat ART به عنوان یک runtime معرفی شد و و از اندروید 5.0 Lollipop کاملا جایگزین Dalvik شد.اندروید 7.0 کامپایلر JIT را با امکان Code profiling به ART اضافه نمود که به صورت ثابت باعث بهبود کارایی برنامه های اندروید در هنگام اجرا شد .

</div>