---
layout: post
color: purple
cover: "http://s3-ap-southeast-1.amazonaws.com/monster-machine/images/horssghonr-1436272011-Midas.jpg"
title:  "ART"
date:   2019-06-21 13:50:39
categories: android basic knowledge
---

<div dir="rtl" align="right">
با رو نمایی و ارائه اندروید 4.4 KitKat به بازار ، گوگل تصمیم به معرفی روشی جدید در نحوه اجرای برنامه های کاربردی برروی سیستم عامل اندروید گرفت.
ART در واقع پروژه 2 ساله محرمانه ای بود که گوگل برروی آن کار می کرد که هدف آن نیز بالا بردن کارایی دستگاههای اندرویدی بود.این هدف مبتنی بر این فرضیه بود که دستگاه های مدرن به نسبت دستگاه های اندرویدی پیشین علی الخصوص اولین نسل آن ها ، از لحاظ سرعت CPU و ظرفیت حافظه به نسبت قوی تر هستند.
همانطور که میدانیم برنامه های کاربردی اندروید با فرمت بایت کدهای Dalvik ، بکارگیری و deploy می شوند که بر خلاف کد native قابل جابجایی  است.به منظور اجرای برنامه کاربردی برروی دستگاه این کد باید به زبان ماشین کامپایل شود.
Dalvik مبتنی بر کامپایل JIT یا (just in time) است ، که این به معنای این است که هربار شما بخواهید برنامه کاربردی خود را اجرا نمایید آن بخش از کد مورد نیاز برای اجرا ، در آن لحظه به کد ماشین ترجمه (کامپایل ) می شود.همین وطر که در برنامه به جلو می روید کدهای اضافی شروع به کامپایل شدن و cache شدن می کند به طوری که در حالی که برنامه در حال اجراست سیستم بتواند کد را مجدد استفاده کند.از آنجایی که کامپایل JIT تنها بخشی از کد را کامپایل می کند ، لذا بخش کوچکی از حافظه را درگیر کرده و فضای فیزیکی کمتری برروی دستگاه می گیرد.
ART از طرف دیگر ، زبان واسط ، بایت کد Dalvik ، را به باینری وابسته به سیستم (system-dependent binary) کامپایل می کند.
کل کد برنامه کاربردی در طول نصب پیش کامپایل می شود، بنابراین lag ای که در ابتدای باز کردن یک برنامه برروی دستگاه می بینیم حذف می شود . بدون نیاز به کامپایل JIT ، کد می بایست سریعتر اجرا شود.علاوه بر افزایش سرعت در هنگام استفاده از ART مزیت دومی برای ART نیز قائل هستند.به محض اینکه ART ، کد ماشین برنامه کاربردی را به طور مستقیم اجرا می کند (native execution) ، به اندازه کامپایل کد توسط JIT برروی Dalvik به CPU  صدمه نمی زند.مصرف کم CPU منجر به تاخیر انداختن تخریب باطری می شود که مزیت بسیار بزرگی برای دستگاههای با قابلیت جابجا شدن یا پرتابل می شود.

</div>
<h2>
<div dir="rtl" align="right">
3.1.	چرا ART پیشتر پیاده سازی نشد؟
</div>
</h2>
<div dir="rtl" align="right">
نگاه مختصری در ابتدا به کامپایل AOT می اندازیم.
اول از همه کد ماشین تولید شده احتیاج به فضای بیشتری نسبت به بایت کدهای موجود دارد.بعلاوه کد در زمان نصب پیش کامپایل می شود بنابراین فرایند نصب مدت زمان بیشتری طول می کشد.همچنین در زمان اجرا نیز فضای بیشتری از حافظه را میگیرد.این یعنی تعداد کمتری از برنامه های کاربردی قادر خواهند بود به طور همزمان اجرا شوند.
وقتی اولین دستگاه های اندرویدی تولید شدند ، ظرفیت حافظه و ذخیره سازی دستگاهها بسیار محدود بود و در واقع bottleneck برای کارایی محسوب می شدند.این دلیلی بر برتری روش JIT در آن زمان بود.امروزه حافظه ارزانتر و درنتیجه فراوان تر است ، در نتیجه ART گامی منطقی برای رو به جلو بودن است. (ART vs Dalvik, n.d.)

</div>
<div align="center">
 <p><img src="../assets/images/art.png" alt="art vs dalvik screenshot" /></p>
</div>

