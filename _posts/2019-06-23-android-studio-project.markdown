---
layout: post
color: purple
cover: "http://s3-ap-southeast-1.amazonaws.com/monster-machine/images/horssghonr-1436272011-Midas.jpg"
title:  "چارچوب پروژه ها در اندروید استودیو"
date:   2019-06-21 13:50:39
categories: android basic knowledge
---

<div dir="rtl" align="right">
پروژه در اندروید استودیو شامل هرچیزی که فضای کاری شما را برای برنامه تعریف کند می باشد، از سورس کد و asset ها (دارایی های پروژه) تا کد تست و پیکربندی های ساخت پروژه.
وقتی پروژه ای را شروع می کنیم ، اندروید استودیو ساختار ضروری و لازمه را برای تمام فایل هایتان  می سازد که در پنجره Project در سمت چپ IDE قابل نمایش است (برروی View>Tool>Window>Project کلیک کنید). 

</div>
<h2>
<div dir="rtl" align="right">
5.1.	ماژول ها
</div>
</h2>
<div dir="rtl" align="right">
ماژول مجموعه ای از فایل های سورس و تنظیمات ساخت است که به شما امکان تقسیم پروژه به واحدهای مجزا از وظیفه مندی ها را می دهد.پروژه شما می تواند شامل یک یا چند ماژول باشد و یک ماژول ممکن است از ماژول دیگری به عنوان وابستگی استفاده کند.
هر ماژول می تواند به صورت مستقل ساخته شده ، تست و دیباگ شود.ماژول های اضافی معمولا زمانی کاربرد دارند که می خواهید کتابخانه ای در پروژه خود ایجاد کنید یا زمانی که می خواهید مجموعه ای متفاوت از کد و منابع برای انواع متفاوتی از دستگاه ها مانند تلفن ها یا دستگاه های پوشیدنی ایجاد کرده ولی در عین حال آن ها را در خود پروژه جای دهید و کد را به اشتراک بگذارید.
می توانید برای اضافه کردن ماژول جدید به پروژه به روش زیر عمل کنید:
File>New>New Module
اندروید استودیو انواع کم و مجزایی از ماژول ها را پیشنهاد میدهد:
<br/>
 	* Android app module
	<br/>
	در واقع مخزنی برای سورس کد ، فایل های resource و تنظیمات در سطح برنامه شما همچون فایل build در سطح ماژول و فایل Manifest است.وقتی پروژه جدیدی را ایجاد می کنید ،نام ماژول پیش فرض “app” است.در پنجره ساخت ماژول جدید،اندروید استودیو انواع زیر را برای ماژول های برنامه پیشنهاد می دهد.
	<br/>
	•	Phone & Tablet Module
	<br/>
	•	Wear OS Module
	<br/>
	•	Android TV Module
	<br/>
	•	Glass Module
	<br/>
	<br/>
	
	 	* Dynamic feature Module
		<br/>
		نماینده ی فیچری ماژولار برای برنامه شماست که میتواند از مزیت Google Play Dynamic Delivery استفاده کند.برای مثال با ماژول های با فیچرهای پویا می توانید کاربرانتان را با فیچرهای مشخص و براساس تقاضا و یا با تجربه های آنی و از طریق Google Play Instant.تامین کنید .برای اطلاعات بیشتر از این بخش به Add support for Dynamic Delivery رجوع کنید.
		<br/>
	<br/>
	
	 	* Library Module
			<br/>
		مخزنی برای کدهای قابل استفاده مجدد فراهم م یکند که بدین طریق می توانید از آن به عنوان یک وابستگی در ماژول های برنامه خود استفاده کنید و یا آن را در دیگر پروژه ها import کنید.
به لحاظ ساختاری ، ماژول library مشابه ماژول app است اما زمانی که ساخته می شود ، یک فایل آرشیو کد را به جای APK ایجاد می کند ، لذا قابل نصب برروی دستگاه نیست.
در پنجره ماژول جدید ، اندروید استودیو ماژولهای کتابخانه ای زیر را پیشنهاد می دهد :
<br/>
	<br/>
		•	Android Library
<br/>		
		این نوع از کتابخانه می تواند شامل تمامی انواع فایل های پشتیبانی شده در پروژه اندروید شامل سورس کد ، منابع و فایل های manifest باشد.نتیجه ساخت پروژه فایل Android Archive (AAR) است که می توانید آن را به عنوان یک وابستگی (dependency) برای ماژول های app اندروید خود اضافه کنید.
	<br/>
	<br/>
	•	Java Library	
	<br/>		
	این نوع از کتابخانه می تواند شامل تنها فایل های سورس جاوا باشد.نتیجه ساخت آن Java Archive (JAR) است که می توانید آن را به عنوان وابستگی به ماژول های app اندروید یا دیگر پروژه های جاوایی اضافه کنید.
		<br/>
		<br/>
	 	* Google Cloud Module
				<br/>
		مخزنی برای کد backend Google Cloud شما فراهم می کند.این ماژول کد و وابستگی های لازمه برای backend یک Java App Engine را داراست که از HTTP ساده ، Cloud Endpoint ها و Cloud Messaging برای اتصال به برنامه شما استفاده می کند.
شما می توانید backend خود را توسعه دهید تا سرویس های Cloud که برنامه شما به آن احتیاج دارد تامین شود.
با استفاده از اندروید استودیو ماژول Google Cloud را می توانید توسعه دهید و امکان مدیریت کد برنامه و backend کد در همان پروژه برای شما فراهم می شود.شما همچنین می توانید کد backend خود را به صورت محلی اجرا و تست کنید و از اندروید استودیو برای استقرار ماژول Google Cloud خود استفاده کنید.برای اطلاعات بیشتر از این بخش به Running, Testing, and Deploying the Backend رجوع کنید.
برخی از مردم به ماژول ها به عنوان زیر پروژه رجوع می کنند.برای مثال زمانی که میخواهید یک ماژول کتابخانه ای ایجاد کنید و آن را به عنوان dependency به ماژول برنامه اندروید خود اضافه کنید می بایست آن را به شکل زیر اعلان کنید:

</div>
<div>
		<br/>
</div>
		
<div dir="ltr" align="left" style=" background-color:rgba(50, 115, 220, 0.3);">

dependencies 
{
		<br/>
  compile project(‘:my-library-module’)
  		<br/>
}

</div>
<h2>
<div dir="rtl" align="right">
5.2.	فایل های پروژه
</div>
</h2>
<div dir="rtl" align="right">
اندروید استودیو به صورت پیش فرض ، فایل های پروژه شما را در نما Android نمایش می دهد .این نما سلسله مراتب واقعی فایل برروی دیسک را منعکس نمی کند ، اما با انواع ماژول ها و فایل سازماندهی شده که به سادگی بین فایل های کلیدی سورس می توان حرکت کرد ، فایل ها و دایرکتوری های مشخصی را که خیلی استفاده نمی شوند از دید پنهان نمود .برخی از این تغییرات ساختاری در مقایسه با ساختار روی دیسک به شرح ذیل است:
	<br/>
•	تمامی فایل های تنظیمات مرتبط با ساخت را در گروه Gradle Script نمایش می دهد.
	<br/>
•	تمامی فایل های manifest را برای هر ماژول در گروه در سطح ماژول نمایش می دهد(زمانی که شما فایل های مانیست متفاوتی برای محصولات و انواع ساخت ها دارید).
	<br/>
•	تمامی دیگر فایل های منبع را در یک گروه نمایش می دهد به جای آنکه آن را در فلدر مجزایی برای هر منبع نمایش دهد.برای مثال تمامی ورژن های density تصاویر در کنار هم می توانید مشاهده کنید.
<br/>
در هر ماژول app اندروید ، فایل ها در گروه های زیر نمایش داده می شوند:
<br/>
•	Manifest
<br/>
شامل فایل AndroidManifest.xml است.
<br/>
•	Java
<br/>
شامل فایل های سورس کد جاوا می باشد که با نام پکیج ها از یکدیگر جدا شده اند و شامل کد تست Junit می باشد.
<br/>
•	Res
<br/>
شامل تمامی منابع غیر کد می باشد مثل layout های XML، UI Strings و تصاویر bitmap که به زیر دایرکتوری ها مطابق خود تقسیم بندی شده است.برا ی اطلاع بیشتر در مورد انواع منابع به بخش Providing Resources. رجوع کنید.
<br/>
</div>
<div align="center">
 <p><img src="../assets/images/android-projects.png" alt="android projects screenshot" /></p>
</div>
<h2>
<div dir="rtl" align="right">
5.3.	نمای Project
</div>
</h2>
<div dir="rtl" align="right">
برای مشاهده ساختار واقعی پروژه که شامل همه فایل های hidden هم هست از دید Android ، از dropdown بالای پنجره پروژه Project را انتخاب کنید.زمانیکه نمای Project را انتخاب می کنید ، تعداد زیادتری از فایل ها و دایرکتوری ها را می توانید مشاهده کنید.مهمترین آن ها به شرح ذیل است: 
</div>
<div align="center">
 <p><img src="../assets/images/project-view.png" alt="project view screenshot" /></p>
</div>
<div dir="rtl" align="right" style="color:red">
/module-name
</div>
<div dir="rtl" align="right" >
/build
<br/>
شامل خروجی های ساخت پروژه است.
<br/>
libs/
<br/>
شامل کتابخانه های خصوصی است.
<br/>
src/
<br/>
شامل تمام کد ها  و فایل های منبع برای ماژول های بخش های زیر است:
<br/>
androidTest/
<br/>
شامل کد برای ساخت test بوده که برروی دستگاه اندروید اجرا می شود.برای اطلاع بیشتر به Android Test documentation رجوع کنید.
<br/>
main/
<br/>
شامل مجموعه فایل های منبع main می باشد:کد اندروید و منابعی که برای تمام انواع ساخت به اشتراک گذارده می شود(فایل ها یی که برای دیگر انواع ساخت برروی دایرکتوری مجاور قراردارند مانند src/debug برای نوع ساخت debug)
<br/>
AndroidManifest.xml
<br/>
طبیعت برنامه و هرکدام از کامپوننت های آن را شرح می دهد.برای اطلاع بیشتر به AndroidManifest.xml  رجوع کنید.
<br/>
java/
<br/>
شامل کد های منبع جاواست.
<br/>
jni/
<br/>
شامل کدهای native با استفاده از Java Native Interface (JNI)است .برای اطلاع بیشتر به Android NDK documentation رجوع کنید.
<br/>
gen/
<br/>
شامل فایل های جاوا تولید شده توسط Android Studio می باشد مانند R.java و اینترفیس هایی که از فایل های AIDL ایجاد می شوند.
<br/>
res/
<br/>
شامل منابع پروژه است، مانند فایل های drawable ، layout ها و Strings .
<br/>
assets/
<br/>
شامل فایل هایی است که باید به فایل .apk کامپایل شود.به این دایرکتوری همانند فایل سیستم های نوعی با استفاده از URI ها می توان دسترسی داشت و فایل های را همانند رشته ای از بایت ها با استفاده از AssetManager می توان خواند.برای مثال ، این فلدر بهترین مکان برای داده های بازی ها و یا texture هاست.
<br/>
test/
<br/>
شامل کد برای تست های محلی برروی JVM است.
<br/>
build.gradle )module)
<br/>
پیکربندی های مخصوص ساخت ماژول در اینجا تعریف می شود.
<br/>
build.gradle )project)
<br/>
پیکربندی های ساخت را که برای برروی تمام ماژول ها اعمال می شود در اینجا تعریف می شود.این فایل با پروژه یکپارچه می شود، برای همین باید آن ها را حتما در کنترل نگارش ها به همراه دیگر کدهای منبع نگهداری کنید .برای اطلاع بیشتر به Configure Your Build رجوع کنید.


</div>
<h2>
<div dir="rtl" align="right">
5.4.	تنظیمات ساختار پروژه
</div>
</h2>
<div dir="rtl" align="right">
برای تغییر انواع تنظیمات پروژه برای پروژه اندروید استودیو ، دیالوگ Project Structure را با کلیک برروی File>Project Structure باز کنید.که شامل بخش های زیر است:
<br/>
•	SDK Location :
<br/>
مکان JDK ، Android SDK و Android NDK را در پروژه تعریف می کند.
<br/>
•	Project : ورژن Gradle و plugin اندروید Gradle و همینطور مکان repository را تنظیم می کنید .
<br/>
•	Modules:امکان ویرایش پیکربندی های ساخت مخصوص ماژول را می دهدکه شامل حداقل SDK و SDK  هدف ، امضای app و وابستگی های کتابخانه ای می باشد.
<br/>
•	Dependencies
<br/>
<h3>

5.4.1.	Modules

</h3>
تنظیمات ماژول امکان تغییر گزینه های پیکربندی های برای هر ماژول پروژه را به شما می دهد.هر کدام شامل Tab های زیر است:
<br/>
•	Properties:  نگارش های SDK و ابزارهای ساخت را که با استفاده از آن ماژول کامپایل می شود مشخص می کند.
<br/>
•	Default Config: شامل اطلاعات پیش فرض پیکربندی پروژه می باشد مثل ورژن SDK هدف ، مینیمم ورژن SDK ، کانفیگ Sign پروژه و...
<br/>
•	Signing Configs :پیکربندی هایی که مد نظر برای امضا پروژه استsign your APK.
<br/>
<h3>
5.4.2.	Build Variants
</h3>
•	Flavors: 
<br/>
 امکان ساخت چندین مدل build به شما می دهد که هر کدام مجموعه ای از تنظیمات پیکربندی را داراست مانند حداقل نگارش SDK و نگارش هدف SDK و همین طور کد نگارش و نام نگارش.برای مثال مدلی  از ساخت را تعریف کنید که حداقل SDK 15 و SDK هدف 21 داشته و مدل دیگری هم تعریف کنید که حداقل 19 و SDK هدف 23 داشته باشد.
 <br/>
•	Build Types: 
<br/>
امکان ایجاد و تغییر پیکربندی ساخت پروژه را می دهد .به طور پیش فرض هر ماژول دو مدل ساخت debug و release دارد اما شما با توجه به نیاز خود می توانید آنچه را که نیاز دارید تعریف کنید.
<h3>
5.4.3.	Dependencies
</h3>
dependency ها ، فایل و کتابخانه های ماژول را لیست میکنید.شما می توانیند وابستگی ها را در این بخش اضافه کنید ، تغییر دهید و یا حذف کنید.

</div>
<h2>
<div dir="rtl" align="right">
5.5 DEVELOPER SERVICES
</div>
</h2>

<div dir="rtl" align="right">
Developer Services :
 <br/>
 شامل تنظیمات کامپوننت های add-in اندروید استودیو که از گوگل یا third-party ها اضافه شده اند می باشد. برای دسترسی به این سرویس ها از منوی Tools ، FireBase را انتخاب می کنیم.
  <br/>
Developer Services از بخش پنحره Project Structure شامل صفحات پیکربندی برای چندین سرویس است که در پروژه خود می توانید از آن ها استفاده کنید.این بخش شامل صفحات زیر است:
 <br/>
•	Google AdMob :
 <br/>
 امکان استفاده از کامپوننت Google AdMob را به شما می دهد که با استفاده از آن می توانید کابران خود را بشناسید و تبلیغات درخور آن ها را به ایشان نمایش دهید.
  <br/>
•	Analytics : 
 <br/>
امکان استفاده از Google Analytics را به شما می دهد که به شما کمک می کند تا میزان تعاملات کاربر را با برنامه خود در دستگاه ها و محیط های مختلف اندازیه گیری کنید و بسنجید.
 <br/>
•	Authentication :
 <br/>
 امکان استفاده از Google Sign-In  برای ورود به برنامه با استفاده از حساب کاربری Google فراهم می کند.
  <br/>
•	Cloud :
 <br/>
 امکان استفاده از سرویس های مبتنی بر Cloud Firebase را فراهم می کند.
  <br/>
•	Notifications : 
 <br/>
امکان استفاده از Google Cloud Messaging برای ارتباط بین برنامه و سرورتان فراهم می کند.
استفاده از هر کدام این سرویس ها dependency ها و مجوزهایی را به پروژه تحمیل خواهد کرد.

</div>