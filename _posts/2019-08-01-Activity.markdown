---
layout: post
color: purple
cover: "http://s3-ap-southeast-1.amazonaws.com/monster-machine/images/horssghonr-1436272011-Midas.jpg"
title:  "Activity"
date:   2019-08-01 13:50:39
categories: android basic knowledge
---
کلاس Activity کامپوننت اصلی برنامه های کاربردی اندروید است ، و روشی که که activity ها راه اندازی می شوند و اینکه چطور در کنار قرار می گیرند هم بعنوان بخش اصلی مدل برنامه کاربردی پلت فرم مطرح است.

برخلاف الگوهای برنامه نویسی که در آن ها برنامه ها از متد main() راه اندازی میشوند سیستم اندروید کد را با نمونه ای از Activity با فراخوانی متد callback آغاز می کند.

activity ها در واقع زیر کلاسی  Activity هستند و هر activity پنجره ای جهت ترسیم UI برنامه فراهم می کند.این پنجره عموما صفحه نمایش را پر می کند اما ممکن است از صفحه نمایش کوچکتر هم باشدو یا برروی دیگر پنجره ها شناور باشد.برای استفاده از activity ها در برنامه باید اطلاعات مربوط به آن را در مانیفست برنامه ثبت کنیم و در نهایت هم باید چرخه حیات activity را به طور مناسب مدیریت نماییم.

<h2>
1. پیکربندی مانیفست
</h2>

برای اعلان activity ، در فایل مانیفست تگ <activity> را بعنوان فرزند تگ <application> اضافه می کنیم.

<div align="center">
 <p><img src="../assets/images/activity1.png" alt="activity screenshot" /></p>
</div>
تنها attribute اجباری برای آن android:name است که نام کلاس activity د رآن مشخص می شود.میتوان attribute های دیگر را نیز به آن اضافه کرد تا دیگر خصوصیات activity همانند label ، icon یا theme در آن تعریف گردد.

<h2>
2.	اعلان فیلترهای intent
</h2>
فیلتر های intent فیچرهایی بسیار قدرتمند در پلت فرم اندروید محسوب می شوند. Intent ها امکان راه اندازی activity را براساس یک درخواست صریح و یا ضمنی فراهم می کنند.برای مثال یک درخواست صریح ممکن است به سیستم اعلام کند تا activity ارسال ایمیل را در برنامه Gmail راه اندازی کن و یک درخواست ضمنی به سیستم می گوید ارسال ایمیل را در هر activity که می تواند این کار را انجام دهد آغاز کن.

هنگامی که UI از کاربر میپرسد که از کدام برنامه برای انجام کار استفاده کند ،این درواقع همان فیلتر Intent است.برای استفاده از این فیچر باید از تگ <intent-filter> در المان <activity> استفاده کنیم.در تعریف این المان از المان <action>  به صورت اختیاری از المان <category> و یا المان <data> هم استفاده می کنیم.این المان ها به منظور تعیین نوع Intent و در نهایت اینکه چه activity  می تواند پاسخگو کار باشد با یکدیگر ترکیب و استفاده می شوند.برای مثال کد زیر نحوه پیکربندی یک activity که داده متنی را ارسال می کند و درخواست ها را از دیگر activity ها دریافت می کند نمایش می دهد:


<div align="center">
 <p><img src="../assets/images/activity2.png" alt="activity screenshot" /></p> 
</div>
-	در این مثال المان <action> مشخص می کند که این activity داده را ارسال می کند.
-	با اعلان <category> بعنوان DEFAULT activity را قادر می سازد تا درخواست ها را دریافت کند.
-	المان <data> نوع داده ای که این activity ارسال می کند را مشخص می کند.
-	قطعه کد زیر نحوه فراخوانی activity که در بالا شرح داده شد را نمایش می دهد:

<div align="center">
 <p><img src="../assets/images/activity3.png" alt="activity screenshot" /></p> 
</div>

اگر مقصود شما این است که برنامه شما این امکان را به برنامه های دیگر ندهد که activity های آن را فعال نمایندنیازی به فیلتر های Intent نخواهید داشت.activity هایی که نمی خواهید در دسترس دیگر برنامه های کاربردی باشند نیازی به فیلتر های intent نخواهند داشت.و می توانید آن ها را با استفاده از intent های صریح آغاز و راه اندازی کنید.
<h2>
3.	اعلان مجوز ها
</h2>
برای کنترل اینکه چه برنامه ای بتواند activity بخصوصی را راه اندازی کند می توان از تگ <activity> در مانیفست استفاده نمود.activity والد نمیتواند activity فرزند را راهاندازی کند مگر اینکه هر دو activity مجوز و سطح دسترسی یکشان در مانیفست داشته باشند.اگر المان <uses-permission> را برای activity بخصوصی اعلان می کنید ، activity فراخوانی شده باید در المان <uses-permission> با activity مورد نظر مطابقت داشته باشند.برای مثال ، اگر برنامه شما میخواهد از یرنامه ای به نام SocialApp استفاده کند تا پستی را در رسانه ای اجتماعی به اشتراک بگذارد ، SocialApp می بایست همان مجوز و دسترسی را که برنامه فراخوانی کننده دارد را داشته باشد:
<div align="center">
 <p><img src="../assets/images/activity4.png" alt="activity screenshot" /></p> 
</div>
سپس برای آنکه برنامه شما بتواند برنامه SocialApp را فراخوانی کند ، باید با مجوز برنامه SocialApp در مانیفست مطابقت داشته باشد:
<div align="center">
 <p><img src="../assets/images/activity5.png" alt="activity screenshot" /></p> 
</div>
<h2>
4.	مدیریت چرخه حیات در ACTIVITY
</h2>

قبل از شروع مبحث چرخه حیات به یکی از مفاهیم اصلی و پرکاربرد در اندروید به نام intent  می پردازیم.intent ها حامل یک سری پیغام هستند که به واسطه ی آن ها از سیستم تقاضای انجام کاری را می کنیم.intent ها دو نوع هستند :
1.	صریح یا Explicit
2.	ضمنی یا implicit

Intent صریح برای فراخوانی یک سرویس یا activity مشخص به کار می رود.فرض کنیم اپلیکیشن دارای دو Activity باشد و بخواهیم از طریق Activity اول ، Activity دوم را اجرا کنیم در این صورت باید از Intent صریح به صورت زیر استفاده کنیم:

<div align="center">
 <p><img src="../assets/images/activity6.png" alt="activity screenshot" /></p> 
</div>

یا اگر برای اجرای سرویس باشد از متد زیر استفاده می کنیم:

<div align="center">
 <p><img src="../assets/images/activity7.png" alt="activity screenshot" /></p> 
</div>

Intent ضمنی زمانی استفاده دارد که بخواهیم اندروید برای ما کاری انجام دهد و برایمان مهم نباشد که چه اکتیویتی یا سرویسی آن کار را انجام دهد در این صورت از نوع ضمنی آن استفاده می کنیم.در این صورت اندروید تمام اجزایی که قابلیت انجام آن کار را دارند برای کاربر لیست می کند و کاربر جز دلخواه خود را انتخاب می کند.برای مثال فرض کنید می خواهیم یک تصویر را به کاربر نمایش دهیم و فرقی نمی کند چه ابزاری برای نمایش تصویر استفاده شود برای این کار به صورت ضمنی از اندروید می خواهیم که تصویر مورد نظر را نمایش دهد .در این صورت اندروید تمام Activity هایی که به عنوان نمایش دهنده ی تصویر در اندروید ثبت شده اند را برای کاربر لیست می کند و تصویر توسط نرم افزار دلخواه کاربر نمایش داده می شود.
<div align="center">
 <p><img src="../assets/images/activity8.png" alt="activity screenshot" /></p> 
</div>

<h2>
5.	چرخه حیات در Activity
</h2>

<div align="center">
 <p><img src="../assets/images/activity9.png" alt="activity screenshot" /></p> 
</div>

در طول چرخه حیات Activity ، وضعیت های متفاوتی برای activity پیش می آید که برای استفاده از آن یک سری از callback ها برای کنترل و مدیریت این گذار ها وجود دارد .موارد ذیل این callback ها را معرفی می کند:
<h3>
5.1.onCreate()
</h3>

هنگامی که سیستم activity شما را ایجاد می کند این callback را می بایست پیاده سازی کنید.پیاده سازی شما می بایست مولفه های اصلی activity شما را مقدار دهی اولیه کند.برای مثال ، برنامه می بایست View را ایجاد و داده ها را در اینجا مقید و bind کند.در اینجاست که باسد setContentView() را برای تعریف layout فراخوانی کنیم.هنگامی که oncreate() تمام می شود ، callback بعدی onStart() است.
<h3>
5.2.	onStart()
</h3>
هنگامی که oncreate() وجود دارد ، activity وارد وضعیت Started می شود و activity برای کاربر قابل مشاهده می شود. این فراخوانی شامل آخرین مواردی است کهactivity برای اینکه به foreground بیاید و تعاملی شود نیاز دارد .
<h3>
5.3.	onResume()
</h3>
سیستم کمی قبل از زمانی که activity بخواهد با کاربر تعاملی داشته باشد آن را فراخوانی می کند..در این نقطه ، activity در بالای پشته activity است و تمام ورودی کاربر را گرفته است.بیشتر وظایف اصلی برنامه در این متد پیاده سازی می شود.callback onPause() همیشه پس از onResume() فراخوانی می شود.
<h3>
5.4.	onPause()
</h3>
زمانی این متد فراخوانی می شود که activity وارد وضعیت Pause شده باشد و دیگر تمرکزی  برروی آن نباشد.این وضعیت زمانی رخ می دهد که بعنوان مثال ، کاربر دکمه Back یا Recent را زده باشد.هنگامی که سیستم onPause را برای activity شما فراخوانی می کند به صورت تکنیکی یعنی activity همچنان تا اندازه ای قابل مشاهده است.اما اغلب نشانده این است که کاربر در حال ترک activity است و به زودی activity وارد وضعیت Stopped یا Resumed می شود.

Activity در وضعیت Paused ممکن است اگر کاربر انتظار بروز رسانی UI را داشته باشد برای بروزرسانی UI ادامه پیدا کند .مثال زمانی که activity شامل نقشه راهنما در حال نمایش و یا media player در حال اجرا می باشد.حتی اگر چنین activity دیگر focus نداشته باشد ، کاربر منتظر این خواهد بود تا UI به روز شود .

از onPause() برای حفظ داده های برنامه یا کاربر ، فراخوانی های شبکه یا اجرا تراکنش های دیتابیس استفاده شود.هنگامی که onPause اجرایش تمام می شود، callback بعدی یا onStop() و یا onResume() خواهد بود که این بسته به این است که بعد از اینکه activity وارد وضعیت Paused می شود چه اتفاقی می افتد.


<h3>
5.5.	onStop()
</h3>

زمانی که activity دیگر برای کاربر قابل مشاهده نیست onstop() فراخوانی می شود.ممکن است این activity زمانی فراخوانی شود که activity در حال از بین رفتن است و activity جدیدی در حال شروع است یا activity موجود در حال ورود به وضعیت Resume است و در حال پوشاندن activity متوقف شده است.در تمام این وضعیت ها ، activity متوقف شده دیگر برای کاربر قابل مشاهده نیست.

Callback بعدی   یا onRestart() است ، که این در حالیست که activity در حال بازگشتن به برقراری تعامل با کاربر است یا onDestroy() است که در آن activity کاملا در حال از بین رفتن است.
<h3>
5.6.	onRestart()
</h3>
سیستم این callback را زمانی فراخوانی می کند که activity در وضعیت Stopped باشد و در حال رفتن به شروع مجدد است.onRestart() ، وضعیت activity را از زمانی که activity متوقف شده است بازیابی می کند و مجدد ذخیره میکند.
این callback همیشه بعد از onStart() دنبال می شود

<h3>
5.7.	onDestroy()
</h3>

این callback قبل از اینکه activity از بین برود فراخوانی می شود.این callback آخرین وضعیتی است که activity در آن قرار می گیرد.onDestroy() معمولا زمانی پیاده سازی می شود که می خواهیم مطمئن شویم که تمامی منابع activity یا پراسسی که آن را در اختیار داشته و در حال از بین رفتن است آزاد  می کند.
<h2>
8.	رد و بدل کردن داده بین دو ACTIVITY یا SERVICE با استفاده از INTENT
</h2>

در واقع داده های اضافی را با استفاده از متد putExtra برای Intent تعریف می کنیم.این داده ها به صورت کلید/مقدار می باشند.

** 	پارامتر اول متد putExtra نام کلید و از نوع String می باشد

**  	پارامتر دوم نیز مقدار داده می باشد و از نوع متغیر های اصلی (…,int,float,String) می باشد
	
2.	دریافت داده در Activity دوم :

برای دریافت داده های ارسالی در Activity دوم و یا سرویس و ... به روش زیر عمل می کنیم:

<div align="center">
 <p><img src="../assets/images/activity10.png" alt="activity screenshot" /></p> 
</div>

در واقع داده های اضافی را با استفاده از متد putExtra برای Intent تعریف می کنیم.این داده ها به صورت کلید/مقدار می باشند.
 	پارامتر اول متد putExtra نام کلید و از نوع String می باشد.
 	پارامتر دوم نیز مقدار داده می باشد و از نوع متغیر های اصلی (…,int,float,String) می باشد.

2.	دریافت داده در Activity دوم :
برای دریافت داده های ارسالی در Activity دوم و یا سرویس و ... به روش زیر عمل می کنیم:

<div align="center">
 <p><img src="../assets/images/activity11.png" alt="activity screenshot" /></p> 
</div>
